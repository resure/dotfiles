# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

function twitch {
    livestreamer http://twitch.tv/$1 $2
}

clck() {
  wget -qO- "https://clck.ru/--?url=$1"\ | pbcopy
}

nda() {
  wget -qO- "https://$nda_clck/--?url=$1"\ | pbcopy
}

git_info_for_prompt() {
	local g="$(git rev-parse --git-dir 2>/dev/null)"
	if [ -n "$g" ]; then
	  local r
	  local b
	  if [ -d "$g/../.dotest" ]
	  then
		if test -f "$g/../.dotest/rebasing"
		then
		  r="|REBASE"
		elif test -f "$g/../.dotest/applying"
		then
		  r="|AM"
		else
		  r="|AM/REBASE"
		fi
		b="$(git symbolic-ref HEAD 2>/dev/null)"
	  elif [ -f "$g/.dotest-merge/interactive" ]
	  then
		r="|REBASE-i"
		b="$(cat "$g/.dotest-merge/head-name")"
	  elif [ -d "$g/.dotest-merge" ]
	  then
		r="|REBASE-m"
		b="$(cat "$g/.dotest-merge/head-name")"
	  elif [ -f "$g/MERGE_HEAD" ]
	  then
		r="|MERGING"
		b="$(git symbolic-ref HEAD 2>/dev/null)"
	  else
		if [ -f "$g/BISECT_LOG" ]
		then
		  r="|BISECTING"
		fi
		if ! b="$(git symbolic-ref HEAD 2>/dev/null)"
		then
		  if ! b="tag: $(git describe --exact-match HEAD 2>/dev/null)"
		  then
			b="$(cut -c1-7 "$g/HEAD")..."
		  fi
		fi
	  fi
	 
	  if [ -n "$1" ]; then
		printf "$1" "${b##refs/heads/}$r"
	  else
		printf "[%s]" "${b##refs/heads/}$r"
	  fi
	fi
}

